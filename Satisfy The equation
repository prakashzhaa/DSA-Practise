>> Discription:
Given an array A[ ] of N of  integers, find the index of values that satisfy A + B = C + D where A,B,C & D are integers values in the array.

Note: As there may be multiple pairs satisfying the equation return lexicographically smallest order of  A, B, C and D and return all as -1
if there are no pairs satisfying the equation.

>> Explaination:
A + B = C + D
Eg:-
    arr[]={5,4,6,7,3}
    Here, 5+9=9 and 6+3=9
    
>> Input:

N=7
A[]={3, 4, 7, 1, 2, 9, 8}

>> Code:

class Pair{
    int i,j;
    Pair(int a,int b){
        i=a;
        j=b;
    }
}

class Solution {
    static int[] satisfyEqn(int[] A, int N) {
        // code here
        int ans[]=new int[4];
        Arrays.fill(ans,Integer.MAX_VALUE);
        Map<Integer,Pair> map=new HashMap<>();
        
        for(int i=0;i<N-1;i++){
            for(int j=i+1;j<N;j++){
                int sum=A[i]+A[j];
                if(!map.containsKey(sum)){
                    map.put(sum,new Pair(i,j));
                    continue;
                }
                Pair p=map.get(sum);
                if(p.i!=i && p.j!=j && p.j!=i){
                    int curr[]=new int[4];
                    curr[0]=p.i;
                    curr[1]=p.j;
                    curr[2]=i;
                    curr[3]=j;
                    if(ans[0]==Integer.MAX_VALUE){
                        for(int idx=0;idx<4;idx++){
                            ans[idx]=curr[idx];
                        }
                    } else{
                        boolean replace=false;
                        for(int idx=0;idx<4;idx++){
                            if(ans[idx]>curr[idx]){
                                replace=true;
                                break;
                            } else if(ans[idx]<curr[idx]){
                                break;
                            }
                        }
                        if(replace){
                            for(int idx=0;idx<4;idx++){
                                ans[idx]=curr[idx];
                            }
                        }
                    }
                }
            }
            
        }
        if(ans[0]==Integer.MAX_VALUE){
            Arrays.fill(ans,-1);
        }
        return ans;
    }
};

>> Output:

0 2 3 5

>> Result Explain:
A[0] + A[2] = 3+7 = 10
A[3] + A[5] = 1+9 = 10
